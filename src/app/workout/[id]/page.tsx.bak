'use client';

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useAuth } from '@/lib/hooks/useAuth';
import { getDocument, updateDocument } from '@/lib/firebase/firebaseUtils';
import { FaArrowRight, FaDumbbell, FaRunning, FaClock, FaArrowDown, FaArrowUp, FaChevronDown, FaChevronUp, FaBullseye } from 'react-icons/fa';
import { toast } from 'react-hot-toast';

interface ExerciseVariation {
  easy: string;
  medium: string;
  hard: string;
}

interface EnhancedExercise {
  name: string;
  restingTime: string;
  variations: ExerciseVariation;
  formCues?: string;
  commonMistakes?: string;
  breathingPattern?: string;
  progressionMetrics?: string;
  sets?: number;
  reps?: number;
  duration?: number; // For running exercises (in minutes)
  pace?: string; // For continuous running (e.g., "5:30 min/km")
  intervals?: number; // For interval training
}

interface WorkoutDay {
  day: string;
  type: 'aerobic' | 'strength';
  title: string;
  exercises: string[];
  duration: string;
  intensity: 'קל' | 'בינוני' | 'גבוה';
  workoutGoal?: string;
  enhancedExercises?: EnhancedExercise[];
}

interface UserAnswers {
  gender: 'male' | 'female';
  group: 'youth' | 'teens' | 'children';
  experienceLevel: '0-4months' | 'upto1year' | '1-2years' | '2-3years' | '3plusYears';
  threeKmTime: string;
  pullUps: number;
}

interface WorkoutProgram {
  id: string;
  userId: string;
  createdAt: string;
  schedule: WorkoutDay[];
  userAnswers: UserAnswers;
  answersId: string;
}

export default function WorkoutDetails() {
  const { id } = useParams();
  const router = useRouter();
  const { user } = useAuth();
  const [workout, setWorkout] = useState<WorkoutProgram | null>(null);
  const [loading, setLoading] = useState(true);
  const [enhancingWorkout, setEnhancingWorkout] = useState<Record<number, boolean>>({});
  const [selectedVariations, setSelectedVariations] = useState<Record<string, 'easy' | 'medium' | 'hard'>>({});
  const [expandedExercises, setExpandedExercises] = useState<Record<string, boolean>>({});
  const [isSaving, setIsSaving] = useState(false);
  
  // Define weekDays array for the weekly schedule overview
  const weekDays = ['ראשון', 'שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שבת'];

  // Check if an exercise is a warmup or cooldown exercise
  const isWarmupOrCooldown = (exercise: string): boolean => {
    const lowerCaseExercise = exercise.toLowerCase();
    // More specific matching to avoid false positives
    return (
      lowerCaseExercise.includes('חימום') || 
      lowerCaseExercise.includes('שחרור') || 
      lowerCaseExercise.includes('מתיחות') ||
      lowerCaseExercise === 'warm up' ||
      lowerCaseExercise === 'warmup' ||
      lowerCaseExercise === 'warm-up' ||
      lowerCaseExercise === 'cool down' ||
      lowerCaseExercise === 'cooldown' ||
      lowerCaseExercise === 'cool-down' ||
      lowerCaseExercise === 'stretching' ||
      lowerCaseExercise === 'stretches'
    );
  };

  // Check if an exercise is a running exercise
  const isRunningExercise = (exercise: string): boolean => {
    if (!exercise) return false;
    const lowerCaseExercise = exercise.toLowerCase();
    return lowerCaseExercise.includes('ריצה') || 
           lowerCaseExercise.includes('ריצת') || 
           lowerCaseExercise.includes('אינטרוול') || 
           lowerCaseExercise.includes('interval') ||
           lowerCaseExercise.includes('run') ||
           lowerCaseExercise.includes('sprint');
  };

  // Check if a running exercise is interval-based
  const isIntervalRunning = (exercise: string): boolean => {
    if (!exercise) return false;
    const lowerCaseExercise = exercise.toLowerCase();
    return lowerCaseExercise.includes('אינטרוול') || 
           lowerCaseExercise.includes('interval') ||
           lowerCaseExercise.includes('הפוגות') ||
           lowerCaseExercise.includes('sprint');
  };

  // Translate resting time to Hebrew
  const translateRestingTime = (time: string): string => {
    // Replace English numbers with the same numbers
    let hebrewTime = time.replace(/(\d+)/g, '$1');
    
    // Replace common English time units with Hebrew
    hebrewTime = hebrewTime.replace(/seconds/gi, 'שניות')
                           .replace(/second/gi, 'שניות')
                           .replace(/minutes/gi, 'דקות')
                           .replace(/minute/gi, 'דקות')
                           .replace(/secs/gi, 'שניות')
                           .replace(/sec/gi, 'שניות')
                           .replace(/mins/gi, 'דקות')
                           .replace(/min/gi, 'דקות')
                           .replace(/between sets/gi, 'בין סטים')
                           .replace(/rest/gi, 'מנוחה');
    
    return hebrewTime;
  };

  // Translate common English exercise terms to Hebrew
  const translateToHebrew = (text: string): string => {
    if (!text) return text;
    
    // Common exercise terms dictionary
    const translations: Record<string, string> = {
      'push-up': 'שכיבות שמיכה',
      'push up': 'שכיבות שמיכה',
      'pushup': 'שכיבות שמיכה',
      'pull-up': 'מתח',
      'pull up': 'מתח',
      'pullup': 'מתח',
      'squat': 'סקוואט',
      'lunge': 'לאנג׳',
      'plank': 'פלאנק',
      'burpee': 'ברפי',
      'crunch': 'כפיפות בטן',
      'sit-up': 'כפיפות בטן',
      'sit up': 'כפיפות בטן',
      'situp': 'כפיפות בטן',
      'jumping jack': 'קפיצות פיסוק',
      'jumping jacks': 'קפיצות פיסוק',
      'mountain climber': 'הרים',
      'mountain climbers': 'הרים',
      'dip': 'שקיעות',
      'dips': 'שקיעות',
      'bench press': 'לחיצת חזה',
      'deadlift': 'מתים',
      'shoulder press': 'לחיצת כתפיים',
      'bicep curl': 'כפיפות מרפק',
      'bicep curls': 'כפיפות מרפק',
      'tricep extension': 'הרחקות טרייספס',
      'tricep extensions': 'הרחקות טרייספס',
      'leg raise': 'הרמות רגליים',
      'leg raises': 'הרמות רגליים',
      'russian twist': 'טוויסט רוסי',
      'russian twists': 'טוויסט רוסי',
      'sets': 'סטים',
      'set': 'סט',
      'reps': 'חזרות',
      'rep': 'חזרה',
      'repetitions': 'חזרות',
      'repetition': 'חזרה',
      'rest': 'מנוחה',
      'seconds': 'שניות',
      'second': 'שניות',
      'minutes': 'דקות',
      'minute': 'דקות',
      'easy': 'קל',
      'medium': 'בינוני',
      'hard': 'מאתגר',
      'beginner': 'מתחיל',
      'intermediate': 'בינוני',
      'advanced': 'מתקדם',
      'warmup': 'חימום',
      'warm-up': 'חימום',
      'warm up': 'חימום',
      'cooldown': 'שחרור',
      'cool-down': 'שחרור',
      'cool down': 'שחרור',
      'stretching': 'מתיחות',
      'stretch': 'מתיחה',
      'running': 'ריצה',
      'run': 'ריצה',
      'jogging': 'ריצה קלה',
      'jog': 'ריצה קלה',
      'walking': 'הליכה',
      'walk': 'הליכה',
      'sprint': 'ספרינט',
      'sprinting': 'ספרינט',
      'interval': 'אינטרוול',
      'intervals': 'אינטרוולים',
      'cardio': 'קרדיו',
      'strength': 'כוח',
      'endurance': 'סיבולת',
      'flexibility': 'גמישות',
      'balance': 'שיווי משקל',
      'core': 'ליבה',
      'upper body': 'פלג גוף עליון',
      'lower body': 'פלג גוף תחתון',
      'chest': 'חזה',
      'back': 'גב',
      'shoulders': 'כתפיים',
      'arms': 'זרועות',
      'legs': 'רגליים',
      'abs': 'בטן',
      'abdominals': 'שרירי בטן',
      'glutes': 'ישבן',
      'hamstrings': 'שרירי ירך אחוריים',
      'quads': 'שרירי ירך קדמיים',
      'quadriceps': 'שרירי ירך קדמיים',
      'calves': 'שוקיים',
      'biceps': 'שרירי זרוע קדמיים',
      'triceps': 'שרירי זרוע אחוריים',
      'between': 'בין',
      'with': 'עם',
      'and': 'ו',
      'or': 'או',
      'for': 'למשך',
      'each': 'כל',
      'side': 'צד',
      'sides': 'צדדים',
      'leg': 'רגל',
      'arm': 'זרוע',
      'hold': 'החזקה',
      'holding': 'החזקה',
      'repeat': 'חזור',
      'repeating': 'חזרה',
      'complete': 'השלם',
      'completing': 'השלמה',
      'perform': 'בצע',
      'performing': 'ביצוע',
      'do': 'בצע',
      'doing': 'ביצוע',
      'exercise': 'תרגיל',
      'exercises': 'תרגילים',
      'workout': 'אימון',
      'workouts': 'אימונים',
      'training': 'אימון',
      'program': 'תוכנית',
      'programs': 'תוכניות',
      'routine': 'שגרה',
      'routines': 'שגרות'
    };
    
    // Replace English terms with Hebrew equivalents
    let translatedText = text;
    
    // First replace full phrases (to avoid partial replacements)
    Object.entries(translations).forEach(([english, hebrew]) => {
      // Case insensitive replacement of whole words
      const regex = new RegExp(`\\b${english}\\b`, 'gi');
      translatedText = translatedText.replace(regex, hebrew);
    });
    
    return translatedText;
  };

  const getGroupLabel = (group: string) => {
    const groups = {
      youth: 'נוער (15-18)',
      teens: 'נערים (12-14)',
      children: 'ילדים (8-11)'
    };
    return groups[group as keyof typeof groups] || group;
  };

  const getExperienceLabel = (level: string) => {
    const levels = {
      '0-4months': 'עד 4 חודשים',
      'upto1year': 'עד שנה',
      '1-2years': 'שנה-שנתיים',
      '2-3years': 'שנתיים-שלוש',
      '3plusYears': 'שלוש שנים +'
    };
    return levels[level as keyof typeof levels] || level;
  };

  // Get workout type colors
  const getWorkoutTypeColors = (type: 'aerobic' | 'strength') => {
    return type === 'aerobic' 
      ? { bg: 'bg-blue-50', text: 'text-blue-700', border: 'border-blue-200', icon: 'text-blue-500', darkBg: 'bg-blue-500' }
      : { bg: 'bg-orange-50', text: 'text-orange-700', border: 'border-orange-200', icon: 'text-orange-500', darkBg: 'bg-orange-500' };
  };

  // Function to update exercise parameters and save to Firebase
  const updateExerciseParams = async (
    workoutIndex: number,
    exerciseName: string,
    params: {
      sets?: number;
      reps?: number;
      duration?: number;
      pace?: string;
      intervals?: number;
    }
  ) => {
    if (!workout || !workout.id) return;

    try {
      setIsSaving(true);
      console.log(`Updating exercise: ${exerciseName} with params:`, params);

      // Create a deep copy of the workout to modify
      const updatedWorkout = JSON.parse(JSON.stringify(workout)) as WorkoutProgram;
      
      // Find the exercise to update
      const day = updatedWorkout.schedule[workoutIndex];
      if (!day.enhancedExercises) return;

      const exerciseIndex = day.enhancedExercises.findIndex(e => e.name === exerciseName);
      if (exerciseIndex === -1) {
        console.error(`Exercise not found: ${exerciseName}`);
        console.log('Available exercises:', day.enhancedExercises.map(e => e.name));
        setIsSaving(false);
        return;
      }

      // Update the exercise with new parameters
      updatedWorkout.schedule[workoutIndex].enhancedExercises![exerciseIndex] = {
        ...updatedWorkout.schedule[workoutIndex].enhancedExercises![exerciseIndex],
        ...params
      };

      // Save to Firebase
      await updateDocument('workoutPrograms', workout.id, {
        schedule: updatedWorkout.schedule
      });

      // Update local state
      setWorkout(updatedWorkout);
      console.log(`Successfully updated ${exerciseName}`);
    } catch (error) {
      console.error('Error updating exercise parameters:', error);
      alert('שגיאה בשמירת הנתונים. אנא נסה שוב מאוחר יותר.');
    } finally {
      setIsSaving(false);
    }
  };

  useEffect(() => {
    const fetchWorkout = async () => {
      if (!user || !id) return;

      try {
        const doc = await getDocument<Omit<WorkoutProgram, 'id'>>('workoutPrograms', id as string);
        if (!doc || doc.userId !== user.uid) {
          router.push('/');
          return;
        }
        
        // Initialize workout data
        const workoutData = doc as WorkoutProgram;
        
        // Ensure schedule exists and is an array before proceeding
        if (!workoutData.schedule || !Array.isArray(workoutData.schedule) || workoutData.schedule.length === 0) {
          workoutData.schedule = [];
          toast.error('תוכנית האימון חסרה או פגומה');
          setWorkout(workoutData);
          setLoading(false);
          return;
        }
        
        // Auto-enhance all workouts on page load
        const enhancedSchedule = [...workoutData.schedule];
        const enhancementPromises = enhancedSchedule.map(async (day, index) => {
          if (!day.enhancedExercises) {
            try {
              setEnhancingWorkout(prev => ({ ...prev, [index]: true }));
              const enhancedData = await enhanceWorkout(day);
              
              // Translate any English content in the enhanced data
              if (enhancedData.workoutGoal) {
                enhancedData.workoutGoal = translateToHebrew(enhancedData.workoutGoal);
              }
              
              if (enhancedData.enhancedExercises) {
                enhancedData.enhancedExercises = enhancedData.enhancedExercises.map((exercise: EnhancedExercise) => {
                  // Initialize default values for sets and reps
                  let exerciseWithParams = {
                    ...exercise,
                    name: translateToHebrew(exercise.name),
                    restingTime: translateRestingTime(exercise.restingTime),
                    variations: {
                      easy: translateToHebrew(exercise.variations.easy),
                      medium: translateToHebrew(exercise.variations.medium),
                      hard: translateToHebrew(exercise.variations.hard)
                    }
                  };

                  // Set default values for sets/reps or running parameters
                  if (isRunningExercise(exercise.name)) {
                    if (isIntervalRunning(exercise.name)) {
                      exerciseWithParams.intervals = 5; // Default 5 intervals
                    } else {
                      exerciseWithParams.duration = 20; // Default 20 minutes
                      exerciseWithParams.pace = "5:30"; // Default pace (min/km)
                    }
                  } else {
                    exerciseWithParams.sets = 3; // Default 3 sets
                    exerciseWithParams.reps = 10; // Default 10 reps
                  }

                  return exerciseWithParams;
                });
              }
              
              enhancedSchedule[index] = {
                ...enhancedSchedule[index],
                workoutGoal: enhancedData.workoutGoal,
                enhancedExercises: enhancedData.enhancedExercises,
              };
              
              // Initialize selected variations to 'medium' for all exercises
              enhancedData.enhancedExercises.forEach((exercise: EnhancedExercise) => {
                const key = `${index}-${exercise.name}`;
                setSelectedVariations(prev => ({
                  ...prev,
                  [key]: 'medium'
                }));
              });
            } catch (error) {
              console.error('Error enhancing workout:', error);
            } finally {
              setEnhancingWorkout(prev => ({ ...prev, [index]: false }));
            }
          } else {
            // For existing enhanced exercises, make sure they have the sets/reps/running parameters
            // First check if all exercises in the day have enhanced versions
            const missingExercises = day.exercises
              .filter(exercise => !isWarmupOrCooldown(exercise)) // Skip warm-ups
              .filter(exercise => !day.enhancedExercises!.some(e => 
                e.name === exercise || 
                exercise.includes(e.name) || 
                e.name.includes(exercise)));
            
            // If we found exercises without enhanced versions, create them
            if (missingExercises.length > 0) {
              console.log('Found missing exercises:', missingExercises);
              
              missingExercises.forEach(exerciseName => {
                // Create a basic enhanced exercise object
                const newEnhancedExercise: EnhancedExercise = {
                  name: exerciseName,
                  restingTime: "60 שניות",
                  variations: {
                    easy: "גרסה קלה של התרגיל",
                    medium: "גרסה בינונית של התרגיל",
                    hard: "גרסה קשה של התרגיל"
                  },
                  sets: 3,
                  reps: 10
                };
                
                // Add to enhanced exercises array
                if (!day.enhancedExercises) {
                  day.enhancedExercises = [];
                }
                day.enhancedExercises.push(newEnhancedExercise);
                
                // Initialize the selected variation
                const key = `${index}-${exerciseName}`;
                setSelectedVariations(prev => ({
                  ...prev,
                  [key]: 'medium'
                }));
              });
            }

            // Now update all enhanced exercises with proper parameters
            day.enhancedExercises!.forEach((exercise, i) => {
              if (isRunningExercise(exercise.name)) {
                if (isIntervalRunning(exercise.name)) {
                  if (!exercise.intervals) day.enhancedExercises![i].intervals = 5;
                } else {
                  if (!exercise.duration) day.enhancedExercises![i].duration = 20;
                  if (!exercise.pace) day.enhancedExercises![i].pace = "5:30";
                }
              } else {
                if (!exercise.sets) day.enhancedExercises![i].sets = 3;
                if (!exercise.reps) day.enhancedExercises![i].reps = 10;
              }
            });
          }
        });
        
        await Promise.all(enhancementPromises);
        
        setWorkout({
          ...workoutData,
          schedule: enhancedSchedule
        });
      } catch (error) {
        console.error('Error fetching workout:', error);
        router.push('/');
      } finally {
        setLoading(false);
      }
    };

    fetchWorkout();
  }, [user, id, router]);

  const enhanceWorkout = async (workoutDay: WorkoutDay) => {
    try {
      const response = await fetch('/api/openai/enhance-workout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ workout: workoutDay }),
        // Add timeout to prevent hanging requests
        signal: AbortSignal.timeout(30000) // 30 seconds timeout
      });

      // Handle timeout errors
      if (response.status === 504) {
        console.error('Request timed out');
        throw new Error('בקשה לשרת נכשלה בגלל זמן תגובה ארוך.');
      }

      if (!response.ok) {
        const errorData = await response.json();
        
        // Check for API key errors
        if (errorData.error && (
            errorData.error.includes('API key') || 
            errorData.error.includes('authentication') || 
            errorData.message?.includes('API key') ||
            errorData.message?.includes('authentication')
          )) {
          console.error('OpenAI API key error:', errorData);
          throw new Error('שגיאת אימות מול שרת ה-AI. אנא פנה למנהל המערכת.');
        }
        
        throw new Error(errorData.message || errorData.error || 'Failed to enhance workout details');
      }

      const data = await response.json();
      
      // Validate response structure
      if (!data.workoutGoal || !data.enhancedExercises || !Array.isArray(data.enhancedExercises)) {
        console.error('Invalid response format:', data);
        throw new Error('התקבל פורמט לא תקין מהשרת');
      }
      
      return data;
    } catch (error: any) {
      // Handle AbortError specifically
      if (error.name === 'AbortError') {
        console.error('Request aborted due to timeout');
        throw new Error('בקשה לשרת נכשלה בגלל זמן תגובה ארוך.');
      }
      
      // Re-throw the error to be handled by the caller
      throw error;
    }
  };

  const toggleVariation = (workoutIndex: number, exerciseName: string, variation: 'easy' | 'medium' | 'hard') => {
    const key = `${workoutIndex}-${exerciseName}`;
    setSelectedVariations({
      ...selectedVariations,
      [key]: variation
    });
  };

  const toggleExerciseExpansion = (workoutIndex: number, exerciseName: string) => {
    const key = `${workoutIndex}-${exerciseName}`;
    setExpandedExercises(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  if (loading) {
    return (
      <div className="container-custom pt-32 flex justify-center items-center min-h-[400px]">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-[#ff8714]"></div>
      </div>
    );
  }

  if (!workout) {
    return null;
  }

  return (
    <div className="max-w-5xl mx-auto p-6">
      {/* Header Section */}
      <div className="relative mb-12 overflow-hidden rounded-2xl bg-gradient-to-r from-[#ff8714] to-[#e67200] py-10 px-8 shadow-lg">
        <div className="absolute top-0 right-0 w-64 h-64 -mr-20 -mt-20 rounded-full opacity-20 bg-white"></div>
        <div className="absolute bottom-0 left-0 w-64 h-64 -ml-20 -mb-20 rounded-full opacity-10 bg-white"></div>
        <div className="relative z-10">
          <h1 className="text-4xl md:text-5xl font-bold mb-3 text-white">
            תוכנית אימונים <span className="text-white">שבועית</span>
          </h1>
          <div className="w-24 h-1 bg-white rounded-full mb-4"></div>
          <p className="text-white/90 max-w-2xl">
            תוכנית אימונים מותאמת אישית שנבנתה במיוחד עבורך, בהתאם ליכולות ולמטרות שלך.
          </p>
        </div>
      </div>
      
      <div className="flex justify-between items-center mb-8">
        <button
          onClick={() => router.push('/programs')}
          className="flex items-center gap-2 px-6 py-3 rounded-lg text-white transition-all bg-[#ff8714] hover:bg-[#e67200] shadow-md"
        >
          <FaArrowRight className="w-5 h-5" />
          <span>חזור לתוכניות</span>
        </button>
        
        {isSaving && (
          <div className="flex items-center gap-2 px-4 py-2 bg-green-50 text-green-700 rounded-md border border-green-200">
            <div className="w-4 h-4 border-2 border-t-green-500 border-r-green-500 border-b-green-200 border-l-green-200 rounded-full animate-spin"></div>
            <span>שומר שינויים...</span>
          </div>
        )}
      </div>

      {/* User Profile Card */}
      <div className="bg-white rounded-xl shadow-lg overflow-hidden mb-10 border border-gray-200">
        <div className="bg-gradient-to-r from-[#fff5eb] to-white px-6 py-4 border-b border-gray-200">
          <h2 className="text-xl font-bold text-gray-800">פרופיל המתאמן</h2>
        </div>
        <div className="p-6">
          <div className="grid grid-cols-2 md:grid-cols-3 gap-8">
            <div className="bg-[#fff5eb] p-4 rounded-lg">
              <span className="text-gray-500 text-sm">מין</span>
              <p className="font-medium text-gray-800 mt-1">{workout.userAnswers.gender === 'male' ? 'זכר' : 'נקבה'}</p>
            </div>
            <div className="bg-[#fff5eb] p-4 rounded-lg">
              <span className="text-gray-500 text-sm">קבוצת גיל</span>
              <p className="font-medium text-gray-800 mt-1">{getGroupLabel(workout.userAnswers.group)}</p>
            </div>
            <div className="bg-[#fff5eb] p-4 rounded-lg">
              <span className="text-gray-500 text-sm">ניסיון</span>
              <p className="font-medium text-gray-800 mt-1">{getExperienceLabel(workout.userAnswers.experienceLevel)}</p>
            </div>
            <div className="bg-[#fff5eb] p-4 rounded-lg">
              <span className="text-gray-500 text-sm">זמן ריצת 3 ק&quot;מ</span>
              <p className="font-medium text-gray-800 mt-1">{workout.userAnswers.threeKmTime}</p>
            </div>
            <div className="bg-[#fff5eb] p-4 rounded-lg">
              <span className="text-gray-500 text-sm">מספר עליות מתח</span>
              <p className="font-medium text-gray-800 mt-1">{workout.userAnswers.pullUps}</p>
            </div>
          </div>
        </div>
      </div>
      
      {/* Workout Cards */}
      <h2 className="text-2xl font-bold text-gray-800 mb-6">תוכנית האימונים המפורטת</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-10">
        {Array.isArray(workout.schedule) && workout.schedule.map((workoutDay, index) => {
          const colors = getWorkoutTypeColors(workoutDay.type);
          
          return (
            <div 
              key={index}
              className="bg-white rounded-xl shadow-lg overflow-hidden border border-gray-200 hover:shadow-xl transition-all duration-300"
            >
              {/* Header */}
              <div className={`relative p-6 bg-gradient-to-r from-[#ff8714] to-[#e67200]`}>
                <div className="absolute top-0 right-0 w-32 h-32 -mr-10 -mt-10 rounded-full opacity-20 bg-white"></div>
                <div className="relative z-10">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-3">
                      <div className="w-12 h-12 rounded-full bg-white/20 backdrop-blur-sm flex items-center justify-center">
                        {workoutDay.type === 'aerobic' ? (
                          <FaRunning className="w-6 h-6 text-white" />
                        ) : (
                          <FaDumbbell className="w-6 h-6 text-white" />
                        )}
                      </div>
                      <div>
                        <h3 className="font-bold text-xl text-white">{translateToHebrew(workoutDay.title)}</h3>
                        <div className="flex items-center gap-2 mt-1">
                          <span className="text-white/80 text-sm">אימון {index + 1}</span>
                          <span className="w-1 h-1 rounded-full bg-white/60"></span>
                          <span className="text-white/80 text-sm">{workoutDay.duration}</span>
                        </div>
                      </div>
                    </div>
                    <span className={`px-4 py-1.5 rounded-full text-sm font-medium ${
                      workoutDay.intensity === 'קל' 
                        ? 'bg-green-100 text-green-800' 
                        : workoutDay.intensity === 'בינוני' 
                          ? 'bg-yellow-100 text-yellow-800' 
                          : 'bg-red-100 text-red-800'
                    }`}>
                      {workoutDay.intensity}
                    </span>
                  </div>
                </div>
              </div>
              
              {/* Workout Goal */}
              {enhancingWorkout[index] ? (
                <div className="px-6 py-4 bg-gray-50 border-b border-gray-200 animate-pulse">
                  <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                  <div className="h-4 bg-gray-200 rounded w-1/2"></div>
                </div>
              ) : workoutDay.workoutGoal && (
                <div className="px-6 py-4 bg-gray-50 border-b border-gray-200">
                  <div className="flex items-start gap-2">
                    <FaBullseye className="w-5 h-5 text-[#ff8714] mt-0.5 flex-shrink-0" />
                    <div>
                      <h4 className="font-bold text-gray-800 text-sm">מטרת האימון:</h4>
                      <p className="text-gray-700 text-sm mt-1">{workoutDay.workoutGoal}</p>
                    </div>
                  </div>
                </div>
              )}
              
              {/* Exercises List */}
              <div className="p-6">
                <h4 className="font-bold text-gray-800 mb-4 flex items-center gap-2">
                  <span className="w-6 h-6 rounded-full bg-[#fff5eb] text-[#ff8714] flex items-center justify-center text-sm">{workoutDay.exercises.filter(ex => !isWarmupOrCooldown(ex)).length}</span>
                  <span>תרגילים</span>
                </h4>
                
                <ul className="space-y-4">
                  {workoutDay.exercises
                    .filter(exercise => !isWarmupOrCooldown(exercise))
                    .map((exercise, i) => {
                    // Get the full exercise name for matching
                    const exerciseName = exercise;
                    // Find the matching enhanced exercise
                    const enhancedExercise = workoutDay.enhancedExercises?.find(e => {
                      if (!e || !e.name) return false;
                      
                      // Get the first words of both exercise names
                      const exerciseWords = exerciseName.split(' ');
                      const enhancedWords = e.name.split(' ');
                      
                      // Try different matching strategies
                      return e.name === exerciseName || 
                             exerciseName.includes(e.name) || 
                             e.name.includes(exerciseName) ||
                             (exerciseWords[0] && enhancedWords[0] && 
                              exerciseWords[0].toLowerCase() === enhancedWords[0].toLowerCase());
                    });
                    
                    // If no match was found, use the first exercise as a fallback
                    // This ensures all exercises have editing controls
                    const effectiveExercise = enhancedExercise || 
                      (workoutDay.enhancedExercises && workoutDay.enhancedExercises.length > 0 ? 
                       workoutDay.enhancedExercises[0] : null);
                    
                    const isExpanded = effectiveExercise ? 
                      expandedExercises[`${index}-${effectiveExercise.name}`] : false;
                    const selectedVariation = effectiveExercise ? 
                      selectedVariations[`${index}-${effectiveExercise.name}`] || 'medium' : 'medium';
                    
                    // Debug log to identify matching issues
                    if (!effectiveExercise) {
                      console.log(`No enhanced exercise found for: ${exerciseName}`);
                      if (workoutDay.enhancedExercises) {
                        console.log('Available enhanced exercises:', workoutDay.enhancedExercises.map(e => e.name));
                      }
                    }
                    
                    return (
                      <li key={i} className="border border-gray-200 rounded-lg overflow-hidden">
                        {/* Exercise Header */}
                        <div 
                          className="p-4 bg-[#fff5eb] flex justify-between items-center cursor-pointer hover:bg-[#ffefe0] transition-colors"
                          onClick={() => effectiveExercise && toggleExerciseExpansion(index, effectiveExercise.name)}
                        >
                          <div className="flex items-start gap-3">
                            <div className="w-6 h-6 rounded-full bg-[#ff8714] text-white flex items-center justify-center text-sm flex-shrink-0 mt-0.5">
                              {i + 1}
                            </div>
                            <div>
                              <p className="font-medium text-gray-800">{exercise}</p>
                              <div className="text-sm text-gray-500 mt-1 space-y-1">
                                {effectiveExercise && (
                                  <>
                                    <p>זמן מנוחה: {effectiveExercise.restingTime}</p>
                                    {isRunningExercise(effectiveExercise.name) ? (
                                      isIntervalRunning(effectiveExercise.name) ? (
                                        <p>אינטרוולים: {effectiveExercise.intervals || 5}</p>
                                      ) : (
                                        <p>משך: {effectiveExercise.duration || 20} דקות | קצב: {effectiveExercise.pace || "5:30"} דקות/ק״מ</p>
                                      )
                                    ) : (
                                      <p>סטים: {effectiveExercise.sets || 3} | חזרות: {effectiveExercise.reps || 10}</p>
                                    )}
                                  </>
                                )}
                              </div>
                            </div>
                          </div>
                          {effectiveExercise && (
                            <button className="text-[#ff8714] hover:text-[#e67200]">
                              {isExpanded ? <FaChevronUp /> : <FaChevronDown />}
                            </button>
                          )}
                        </div>
                        
                        {/* Exercise Details (Expanded) */}
                        {effectiveExercise && isExpanded && (
                          <div className="p-4 border-t border-gray-200">
                            {/* Variation Selector */}
                            <div className="flex items-center gap-2 mb-4">
                              <span className="text-sm text-gray-600">רמת קושי:</span>
                              <div className="flex rounded-lg overflow-hidden border border-gray-300">
                                <button 
                                  className={`px-3 py-1 text-sm ${selectedVariation === 'easy' ? 'bg-green-500 text-white' : 'bg-white text-gray-700 hover:bg-gray-100'}`}
                                  onClick={() => toggleVariation(index, effectiveExercise.name, 'easy')}
                                >
                                  קל
                                </button>
                                <button 
                                  className={`px-3 py-1 text-sm border-l border-r border-gray-300 ${selectedVariation === 'medium' ? 'bg-[#ff8714] text-white' : 'bg-white text-gray-700 hover:bg-gray-100'}`}
                                  onClick={() => toggleVariation(index, effectiveExercise.name, 'medium')}
                                >
                                  בינוני
                                </button>
                                <button 
                                  className={`px-3 py-1 text-sm ${selectedVariation === 'hard' ? 'bg-red-500 text-white' : 'bg-white text-gray-700 hover:bg-gray-100'}`}
                                  onClick={() => toggleVariation(index, effectiveExercise.name, 'hard')}
                                >
                                  קשה
                                </button>
                              </div>
                            </div>

                            {/* Exercise Parameters Editor */}
                            <div className="bg-gray-50 p-4 rounded-lg mb-4 border border-gray-200">
                              <h5 className="font-medium text-gray-800 mb-3">הגדרות תרגיל:</h5>
                              
                              {isRunningExercise(effectiveExercise.name) ? (
                                isIntervalRunning(effectiveExercise.name) ? (
                                  // Interval Running Exercise
                                  <div className="space-y-4">
                                    <div>
                                      <label className="block text-sm text-gray-600 mb-1">מספר אינטרוולים:</label>
                                      <div className="flex items-center">
                                        <button 
                                          className="w-8 h-8 rounded-l-md bg-gray-200 flex items-center justify-center hover:bg-gray-300"
                                          onClick={() => {
                                            const currentIntervals = effectiveExercise.intervals || 5;
                                            if (currentIntervals > 1) {
                                              updateExerciseParams(index, effectiveExercise.name, {
                                                intervals: currentIntervals - 1
                                              });
                                            }
                                          }}
                                        >
                                          -
                                        </button>
                                        <input 
                                          type="number" 
                                          min="1"
                                          className="w-12 h-8 text-center border-y border-gray-300 text-sm"
                                          value={effectiveExercise.intervals || 5}
                                          onChange={(e) => {
                                            const value = parseInt(e.target.value);
                                            if (value > 0) {
                                              updateExerciseParams(index, effectiveExercise.name, {
                                                intervals: value
                                              });
                                            }
                                          }}
                                        />
                                        <button 
                                          className="w-8 h-8 rounded-r-md bg-gray-200 flex items-center justify-center hover:bg-gray-300"
                                          onClick={() => {
                                            const currentIntervals = effectiveExercise.intervals || 5;
                                            updateExerciseParams(index, effectiveExercise.name, {
                                              intervals: currentIntervals + 1
                                            });
                                          }}
                                        >
                                          +
                                        </button>
                                      </div>
                                    </div>
                                  </div>
                                ) : (
                                  // Continuous Running Exercise
                                  <div className="space-y-4">
                                    <div>
                                      <label className="block text-sm text-gray-600 mb-1">משך ריצה (דקות):</label>
                                      <div className="flex items-center">
                                        <button 
                                          className="w-8 h-8 rounded-l-md bg-gray-200 flex items-center justify-center hover:bg-gray-300"
                                          onClick={() => {
                                            const currentDuration = effectiveExercise.duration || 20;
                                            if (currentDuration > 1) {
                                              updateExerciseParams(index, effectiveExercise.name, {
                                                duration: currentDuration - 1
                                              });
                                            }
                                          }}
                                        >
                                          -
                                        </button>
                                        <input 
                                          type="number" 
                                          min="1"
                                          className="w-14 h-8 text-center border-y border-gray-300 text-sm"
                                          value={effectiveExercise.duration || 20}
                                          onChange={(e) => {
                                            const value = parseInt(e.target.value);
                                            if (value > 0) {
                                              updateExerciseParams(index, effectiveExercise.name, {
                                                duration: value
                                              });
                                            }
                                          }}
                                        />
                                        <button 
                                          className="w-8 h-8 rounded-r-md bg-gray-200 flex items-center justify-center hover:bg-gray-300"
                                          onClick={() => {
                                            const currentDuration = effectiveExercise.duration || 20;
                                            updateExerciseParams(index, effectiveExercise.name, {
                                              duration: currentDuration + 1
                                            });
                                          }}
                                        >
                                          +
                                        </button>
                                      </div>
                                    </div>
                                    
                                    <div>
                                      <label className="block text-sm text-gray-600 mb-1">קצב (דקות/ק&quot;מ):</label>
                                      <input 
                                        type="text" 
                                        className="w-20 h-8 px-2 border border-gray-300 rounded text-sm"
                                        value={effectiveExercise.pace || "5:30"}
                                        onChange={(e) => {
                                          updateExerciseParams(index, effectiveExercise.name, {
                                            pace: e.target.value
                                          });
                                        }}
                                        placeholder="5:30"
                                      />
                                    </div>
                                  </div>
                                )
                              ) : (
                                // Regular Strength Exercise
                                <div className="flex flex-wrap gap-6">
                                  <div>
                                    <label className="block text-sm text-gray-600 mb-1">מספר סטים:</label>
                                    <div className="flex items-center">
                                      <button 
                                        className="w-8 h-8 rounded-l-md bg-gray-200 flex items-center justify-center hover:bg-gray-300"
                                        onClick={() => {
                                          const currentSets = effectiveExercise.sets || 3;
                                          if (currentSets > 1) {
                                            updateExerciseParams(index, effectiveExercise.name, {
                                              sets: currentSets - 1
                                            });
                                          }
                                        }}
                                      >
                                        -
                                      </button>
                                      <input 
                                        type="number" 
                                        min="1"
                                        className="w-12 h-8 text-center border-y border-gray-300 text-sm"
                                        value={effectiveExercise.sets || 3}
                                        onChange={(e) => {
                                          const value = parseInt(e.target.value);
                                          if (value > 0) {
                                            updateExerciseParams(index, effectiveExercise.name, {
                                              sets: value
                                            });
                                          }
                                        }}
                                      />
                                      <button 
                                        className="w-8 h-8 rounded-r-md bg-gray-200 flex items-center justify-center hover:bg-gray-300"
                                        onClick={() => {
                                          const currentSets = effectiveExercise.sets || 3;
                                          updateExerciseParams(index, effectiveExercise.name, {
                                            sets: currentSets + 1
                                          });
                                        }}
                                      >
                                        +
                                      </button>
                                    </div>
                                  </div>
                                  
                                  <div>
                                    <label className="block text-sm text-gray-600 mb-1">מספר חזרות:</label>
                                    <div className="flex items-center">
                                      <button 
                                        className="w-8 h-8 rounded-l-md bg-gray-200 flex items-center justify-center hover:bg-gray-300"
                                        onClick={() => {
                                          const currentReps = effectiveExercise.reps || 10;
                                          if (currentReps > 1) {
                                            updateExerciseParams(index, effectiveExercise.name, {
                                              reps: currentReps - 1
                                            });
                                          }
                                        }}
                                      >
                                        -
                                      </button>
                                      <input 
                                        type="number" 
                                        min="1"
                                        className="w-12 h-8 text-center border-y border-gray-300 text-sm"
                                        value={effectiveExercise.reps || 10}
                                        onChange={(e) => {
                                          const value = parseInt(e.target.value);
                                          if (value > 0) {
                                            updateExerciseParams(index, effectiveExercise.name, {
                                              reps: value
                                            });
                                          }
                                        }}
                                      />
                                      <button 
                                        className="w-8 h-8 rounded-r-md bg-gray-200 flex items-center justify-center hover:bg-gray-300"
                                        onClick={() => {
                                          const currentReps = effectiveExercise.reps || 10;
                                          updateExerciseParams(index, effectiveExercise.name, {
                                            reps: currentReps + 1
                                          });
                                        }}
                                      >
                                        +
                                      </button>
                                    </div>
                                  </div>
                                </div>
                              )}
                            </div>
                            
                            {/* Variation Description */}
                            <div className="bg-[#fff5eb] p-4 rounded-lg">
                              <h5 className="font-medium text-gray-800 mb-2">תיאור התרגיל:</h5>
                              <p className="text-gray-700">{effectiveExercise.variations[selectedVariation]}</p>
                            </div>
                            
                            {/* Form Cues */}
                            {effectiveExercise.formCues && (
                              <div className="mt-4">
                                <h5 className="font-medium text-gray-800 mb-2">טיפים לביצוע נכון:</h5>
                                <p className="text-gray-700">{effectiveExercise.formCues}</p>
                              </div>
                            )}
                            
                            {/* Common Mistakes */}
                            {effectiveExercise.commonMistakes && (
                              <div className="mt-4">
                                <h5 className="font-medium text-gray-800 mb-2">טעויות נפוצות:</h5>
                                <p className="text-gray-700">{effectiveExercise.commonMistakes}</p>
                              </div>
                            )}
                            
                            {/* Breathing Pattern */}
                            {effectiveExercise.breathingPattern && (
                              <div className="mt-4">
                                <h5 className="font-medium text-gray-800 mb-2">דפוס נשימה:</h5>
                                <p className="text-gray-700">{effectiveExercise.breathingPattern}</p>
                              </div>
                            )}
                          </div>
                        )}
                      </li>
                    );
                  })}
                </ul>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
} 