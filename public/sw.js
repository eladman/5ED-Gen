// This is the main service worker file
// The full implementation will be generated by next-pwa during build
// This is just a placeholder with minimal functionality

self.addEventListener('install', function(event) {
  // Skip waiting forces the waiting service worker to become the active service worker
  self.skipWaiting();
  console.log('Service Worker installed');
});

self.addEventListener('activate', function(event) {
  // Claim control immediately
  event.waitUntil(self.clients.claim());
  console.log('Service Worker activated');
});

// Listen for messages from clients
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Basic fetch handler for offline support
self.addEventListener('fetch', function(event) {
  // Only handle GET requests (most important for PWA)
  if (event.request.method !== 'GET') return;
  
  event.respondWith(
    fetch(event.request)
      .catch(function() {
        // If there's a problem with the network, try to serve from cache
        return caches.match(event.request)
          .then(function(response) {
            // Return the cached response if we have one
            if (response) {
              return response;
            }
            
            // If we get here, we couldn't fetch AND couldn't get from cache
            // Try to return the offline page for HTML requests
            if (event.request.headers.get('accept').includes('text/html')) {
              return caches.match('/offline.html');
            }
            
            // For other types of requests, just return an error
            return new Response('Network error', {
              status: 408,
              headers: { 'Content-Type': 'text/plain' }
            });
          });
      })
  );
}); 